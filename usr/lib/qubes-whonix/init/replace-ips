#!/usr/bin/python2 -O
# -*- coding: utf-8 -*-`
#
# vim: set ts=4 sw=4 sts=4 et :

import os
import sys
import re
import subprocess

WHONIX_IP_GATEWAY = '/etc/whonix-ip-gateway'
WHONIX_IP_LOCAL = '/etc/whonix-ip-local'
IP_ADDRESS = re.compile(r'(?:[0-9]{1,3}\.){3}[0-9]{1,3}')

FILES=[
    '/etc/apt/apt.conf.d/90whonix',
    '/etc/cpfpy.d/30_controlportfilt_default',
    '/etc/network/interfaces.whonix',
    '/etc/resolv.conf',
    '/etc/resolv.conf.anondist',
    '/etc/rinetd.conf.anondist',
    '/etc/sdwdate.d/31_anon_dist_stream_isolation_plugin',
    '/etc/sdwdate.d/35_qubes_stream_isolation_plugin',
    '/etc/tor/torrc.examples',
    '/etc/uwt.d/30_uwt_default',
    '/etc/whonix_firewall.d/30_default',
    '/home/user/.torchat/torchat.ini',
    '/home/user/.xchat2/xchat.conf',
    '/usr/bin/update-torbrowser',
    '/usr/bin/uwt',
    '/usr/bin/whonix_firewall',
    '/usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh',
    '/usr/lib/anon-ws-disable-stacked-tor/torbrowser.sh',
    '/usr/lib/control-port-filter-python/cpfp.py',
    '/usr/lib/leaktest-workstation/simple_ping.py',
    '/usr/lib/whonixcheck/preparation',
    '/usr/share/anon-kde-streamiso/share/config/kioslaverc',
    '/usr/share/anon-torchat/.torchat/torchat.ini',
    '/usr/share/tor/tor-service-defaults-torrc.anondist',
    '/usr/share/xchat-improved-privacy/.xchat2/xchat.conf',
]


def whonix_mode():
    '''Determine Whonix mode.

    Can be either gateway, workstation, tempalte or unknown
    '''
    mode = 'unknown'

    if os.path.exists('/var/run/qubes'):
        if os.path.exists('/var/run/qubes-service/updates-proxy-setup'):
            mode = 'template'
        if os.path.exists('/usr/share/anon-gw-base-files'):
            mode = 'gateway'
        elif os.path.exists('/usr/share/anon-ws-base-files'):
            mode = 'workstation'
    return mode


def is_immutable(filename):
    filename =  os.path.abspath(filename)
    lsattr = subprocess.check_output(['lsattr', filename])
    return lsattr[4] ==  'i'


def replace_ip(ips, current_ip, files, ip_file):
    replaced = False
    for filename in files:
        if os.path.exists(filename):
            try:
                with open(filename, 'r') as infile:
                    text = infile.read()
            except (IOError):
                return False

            match = text 
            for last_ip in ips:
                #if last_ip == current_ip:
                #    continue

                match = re.sub(r'(?m){0}'.
                               format(re.escape(last_ip)),
                               current_ip,
                               match)

                match = re.sub(r'(?m){0}[.]0'.
                               format(re.escape(last_ip.rsplit('.', 1)[0])),
                               current_ip.rsplit('.', 1)[0] + '.0',
                               match)

            if text !=  match:
                try:
                    immutable = False
                    if is_immutable(filename):
                        subprocess.call(['chattr', '-i', os.path.abspath(filename)])

                    with open(filename, 'w') as outfile:
                        outfile.writelines(match)

                    #if immutable:
                    #    subprocess.call(['chattr', '+i', os.path.abspath(filename)])

                    replaced = True
                except (IOError):
                    return False

    if replaced:
        try:
            with open(ip_file, 'w') as outfile:
                outfile.writelines(current_ip)
            replaced = True
        except (IOError):
            return False

    return replaced


def get_ip_address(filename, default=''):
    if os.path.exists(filename):
        try:
            with open(filename, 'r') as infile:
                ip_address = infile.read()
            if IP_ADDRESS.match(ip_address):
                return ip_address.rstrip()
        except (IOError):
            return ''
    return default


def maybe_reload_tor():
    torrc = '/etc/tor/torrc'
    if os.path.exists(torrc):
        try:
            with open(torrc, 'r') as infile:
                text = infile.read()
        except (IOError):
            return

    if re.search(r'^DisableNetwork 0$', text,  re.MULTILINE):
        try:
            if subprocess.check_output(['systemctl', 'is-enabled', 'tor']).strip() == 'enabled':
                subprocess.call(['systemctl', 'reload', 'tor'])
        except (subprocess.CalledProcessError):
            pass


def main(args):
    last_ip_gateway = get_ip_address(WHONIX_IP_GATEWAY, '10.152.152.10')
    last_ip_local = get_ip_address(WHONIX_IP_LOCAL, '10.152.152.11')

    # Qubes R3
    if os.path.exists('/usr/bin/qubesdb-read'):
        qubesdb_read = 'qubesdb-read'
        prefix = '/'

    # Qubes R2
    else:
        qubesdb_read = 'xenstore-read'
        prefix = ''

    if last_ip_gateway:
        if whonix_mode() == 'gateway':
            try:
                current_ip_gateway = subprocess.check_output([qubesdb_read, prefix + 'qubes-netvm-gateway']).rstrip()
            except (OSError, subprocess.CalledProcessError):
                return

            if IP_ADDRESS.match(current_ip_gateway):
                ips_to_replace = [last_ip_gateway, '10.152.152.10',  '10.152.152.11']
                if replace_ip(ips_to_replace, current_ip_gateway, FILES, WHONIX_IP_GATEWAY):
                    maybe_reload_tor()

        if whonix_mode() == 'workstation' and last_ip_local:
            try:
                current_ip_local = subprocess.check_output([qubesdb_read, prefix + 'qubes-ip']).rstrip()
                current_ip_gateway = subprocess.check_output([qubesdb_read, prefix + 'qubes-gateway']).rstrip()
            except (OSError, subprocess.CalledProcessError):
                return

            if IP_ADDRESS.match(current_ip_local) and IP_ADDRESS.match(current_ip_gateway):
                ips_to_replace = [last_ip_local, '10.152.152.11']
                replace_ip(ips_to_replace, current_ip_local, FILES, WHONIX_IP_LOCAL)

                ips_to_replace = [last_ip_gateway, '10.152.152.10']
                replace_ip(ips_to_replace, current_ip_gateway, FILES, WHONIX_IP_GATEWAY)


if __name__ == "__main__":
    main(sys.argv[1:])
